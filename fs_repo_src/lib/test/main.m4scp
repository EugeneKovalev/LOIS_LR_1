m4include(m4define([m4currentFile],builtin(translit,__file__,\,/))builtin(regexp,m4currentFile,.*[/],\&)_config.m4)
M4SCS(
#include "../../include/scp_keynodes.scsy"
// Location: /lib/test/main
)

program(test_main,
M4SCS(	[[	
		start_message = /"=======main start======="/, 
		end_success_message = /"=======main end======="/,
		end_error_message = /"=======main error======="/,
		chain_generate_default_parameters = "/lib/chain/generate_default_parameters/chain_generate_default_parameters",
		chain_get_next = "/lib/chain/get_next/chain_get_next",
		test_generate_formula_1 = "/lib/test/generate_formula_1/test_generate_formula_1",
		prm1,prm2,prm3,prm4]])
M4SEC(	[[
		chain_generate_default_parameters = /generate_default_parameters[SYFIX]/chain_generate_default_parameters,
		chain_get_next = /../chain/get_next[SYFIX]/chain_get_next,
		test_generate_formula_1 = /generate_formula_1[SYFIX]/test_generate_formula_1,
		prm1,prm2,prm3,prm4]]),
	[{ 
		state, true, stack, parameters, empty, 
		link,
		descr 
	}])

DBG(M4SCS(printNl([1_: fixed_: start_message])))

genEl([1_: assign_: node_: const_: empty])

call([1_: fixed_: chain_generate_default_parameters, 2_: fixed_: prm1=[{1_: state, 2_: true, 3_: stack, 4_: parameters, 5_: empty}], 3_: assign_: descr])
waitReturn([1_: fixed_: descr])
ifCoin([1_: fixed_: state, 2_: fixed_: true], , error)

call([1_: fixed_: chain_get_next, 2_: fixed_: prm2 = [{1_: stack, 2_: link, 3_: parameters}], 3_: assign_: descr])
waitReturn([1_: fixed_: descr])

call([1_: fixed_: test_generate_formula_1, 2_: fixed_: prm3=[{1_: state, 2_: true, 3_: stack, 4_: parameters, 5_: empty}], 3_: assign_: descr])
waitReturn([1_: fixed_: descr])
ifCoin([1_: fixed_: state, 2_: fixed_: true], , error)

label(error)
DBG(M4SCS(printNl([1_: fixed_: end_error_message])))
return([])
label(success)
DBG(M4SCS(printNl([1_: fixed_: end_success_message])))
return([])
end()