m4include(m4define([m4currentFile],builtin(translit,__file__,\,/))builtin(regexp,m4currentFile,.*[/],\&)_config.m4)
M4SCS(
#include "../../include/sckp_keynodes.scsy" 
// Location: /lib/test/LOIS_Lab1
)
procedure(test_LOIS_Lab1,
M4SCS(	[[
		start_message = /"=======Hello world!======="/, 
		end_message = /"=======Goodbye world!======="/,
		success_message = /"=======Procedure has been executed successful======="/,
		chain_push_first_singlet = "/lib/chain/push_first_singlet/chain_push_first_singlet",
		chain_push_singlet = "/lib/chain/push_singlet/chain_push_singlet",
		chain_get_next_singlet = "/lib/chain/get_next_singlet/chain_get_next_singlet",
		chain_get_next = "/lib/chain/get_next/chain_get_next",
		chain_pop_destroy_singlet = "/lib/chain/pop_destroy_singlet/chain_pop_destroy_singlet",
		chain_destroy = "/lib/chain/destroy/chain_destroy",
		chain_show = "/lib/chain/show/chain_show",
		chain_purge = "/lib/chain/purge/chain_purge",
		chain_reverse = "/lib/chain/reverse/chain_reverse",
		prm1, prm2, prm3, prm4, prm5, prm6, prm7, prm8
		]])
M4SEC(	[[	
		chain_push_first_singlet = /../chain/push_first_singlet[SYFIX]/chain_push_first_singlet,
		chain_push_singlet = /../chain/push_singlet[SYFIX]/chain_push_singlet,
		chain_get_next_singlet = /../../chain/get_next_singlet[SYFIX]/chain_get_next_singlet,
		chain_get_next = /../chain/get_next[SYFIX]/chain_get_next,
		chain_pop_destroy_singlet = /../chain/pop_destroy[SYFIX]/chain_pop_destroy_singlet,
		chain_destroy = /../chain/destroy[SYFIX]/chain_destroy,
		chain_show = "/../chain/show[SYFIX]/chain_show",
		chain_purge = "/../chain/purge[SYFIX]/chain_purge",
		chain_reverse = "/../chain/reverse[SYFIX]/chain_reverse",
		prm1, prm2, prm3, prm4, prm5, prm6, prm7, prm8
		]]), 
	[{last_link_pointer, parameters, empty, descr,
	  node1, node2, node3}], 
	{[]}) 

DBG(M4SCS(printNl([1_: fixed_: start_message])))

genEl([1_: assign_: node_: const_: empty])
genEl([1_: assign_: node_: const_: parameters])
genEl([1_: assign_: node_: const_: node1])
genEl([1_: assign_: node_: const_: node2])
genEl([1_: assign_: node_: const_: node3])

// # Ñîçäàíèå ïåðâîãî ñèíãëåòîíà
call([1_: fixed_: chain_push_first_singlet, 2_: fixed_: prm1 = [{1_: node1, 2_: last_link_pointer, 3_: empty}], 3_: assign_: descr])
waitReturn([1_: fixed_: descr])

// # Ñîçäàíèå âòîðîãî ñèíãëåòîíà
call([1_: fixed_: chain_push_singlet, 2_: fixed_: prm2 = [{1_: last_link_pointer, 2_: node2, 3_: last_link_pointer, 4_: empty}], 3_: assign_: descr])
waitReturn([1_: fixed_: descr])

// # Ñîçäàíèå òðåòüåãî ñèíãëåòîíà
call([1_: fixed_: chain_push_singlet, 2_: fixed_: prm3 = [{1_: last_link_pointer, 2_: node3, 3_: last_link_pointer, 4_: empty}], 3_: assign_: descr])
waitReturn([1_: fixed_: descr])

call([1_: fixed_: chain_show, 2_: fixed_: prm4 = [{1_: last_link_pointer}], 3_: assign_: descr])
waitReturn([1_: fixed_: descr])



call([1_: fixed_: chain_reverse, 2_: fixed_: prm5 = [{1_: empty, 2_: empty, 3_: last_link_pointer, 4_: parameters, 5_: empty}], 3_: assign_: descr])
waitReturn([1_: fixed_: descr])



call([1_: fixed_: chain_show, 2_: fixed_: prm6 = [{1_: last_link_pointer}], 3_: assign_: descr])
waitReturn([1_: fixed_: descr])

call([1_: fixed_: chain_show, 2_: fixed_: prm6 = [{1_: last_link_pointer}], 3_: assign_: descr])
waitReturn([1_: fixed_: descr])

call([1_: fixed_: chain_purge, 2_: fixed_: prm7 = [{1_: last_link_pointer}], 3_: assign_: descr])
waitReturn([1_: fixed_: descr])

ifVarAssign([1_: last_link_pointer ], exit,)

DBG(M4SCS(printNl([1_: fixed_: success_message])))
label(exit)
DBG(M4SCS(printNl([1_: fixed_: end_message])))

return()
end()