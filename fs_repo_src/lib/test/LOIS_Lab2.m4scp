m4include(m4define([m4currentFile],builtin(translit,__file__,\,/))builtin(regexp,m4currentFile,.*[/],\&)_config.m4)
M4SCS(
#include "../../include/sckp_keynodes.scsy" 
// Location: /lib/test/LOIS_Lab2
)
procedure(test_LOIS_Lab2,
M4SCS(	[[
		start_message = /"=======LOIS LR2 START======="/, 
		end_success_message = /"=======LOIS LR2 SUCCESFUL END======="/,
		end_error_message = /"=======LOIS LR2 ERROR END======="/,
		chain_push_first_singlet = "/lib/chain/push_first_singlet/chain_push_first_singlet",
		chain_push_singlet = "/lib/chain/push_singlet/chain_push_singlet",
		chain_show = "/lib/chain/show/chain_show",
		chain_create_parameters = "/lib/chain/create_parameters/chain_create_parameters",
		chain_get_disjunction = "/lib/chain/get_disjunction/chain_get_disjunction",
		chain_get_negotiation = "/lib/chain/get_negotiation/chain_get_negotiation",
		chain_transform_to_conjunction_of_negotiations = "/lib/chain/transform_to_conjunction_of_negotiations/chain_transform_to_conjunction_of_negotiations",
		chain_remove_neg_A_and_neg_B = "/lib/chain/remove_neg_A_and_neg_B/chain_remove_neg_A_and_neg_B",
		prm1, prm2, prm3, prm4, prm5, prm6, prm7, prm8, prm9, prm10, prm11, prm66
		]])
M4SEC(	[[	
		chain_push_first_singlet = /../chain/push_first_singlet[SYFIX]/chain_push_first_singlet,
		chain_push_singlet = /../chain/push_singlet[SYFIX]/chain_push_singlet,
		chain_show = /../chain/show[SYFIX]/chain_show,
		chain_create_parameters = /../chain/create_parameters[SYFIX]/chain_create_parameters,
		chain_get_disjunction = /../chain/get_disjunction[SYFIX]/chain_get_disjunction,
		chain_get_negotiation = /../chain/get_negotiation[SYFIX]/chain_get_negotiation,
		chain_transform_to_conjunction_of_negotiations = /../chain/transform_to_conjunction_of_negotiations[SYFIX]/chain_transform_to_conjunction_of_negotiations,
		chain_remove_neg_A_and_neg_B = /../chain/remove_neg_A_and_neg_B[SYFIX]/chain_remove_neg_A_and_neg_B,
		prm1, prm2, prm3, prm4, prm5, prm6, prm7, prm8, prm9, prm10, prm11, prm66
		]]), 
	[{
		implication, conjunction, disjunction, negotiation, 
		node_A, node_B, A_or_B, neg_A_or_B, neg_A_and_neg_B, 
		state, true, formula, parameters, empty, descr}], 
	{[]}) 

DBG(M4SCS(printNl([1_: fixed_: start_message])))

genEl([1_: assign_: node_: const_: state])
genEl([1_: assign_: node_: const_: true])
genEl([1_: assign_: node_: const_: parameters])
genEl([1_: assign_: node_: const_: empty])

genEl([1_: assign_: node_: const_: disjunction])
genEl([1_: assign_: node_: const_: negotiation])

call([1_: fixed_: chain_create_parameters, 2_: fixed_: prm1 = [{1_: parameters, 2_: empty}], 3_: assign_: descr])
waitReturn([1_: fixed_: descr])

call([1_: fixed_: chain_get_disjunction, 2_: fixed_: prm2 = [{1_: parameters, 2_: disjunction, 3_: empty}], 3_: assign_: descr])
waitReturn([1_: fixed_: descr])
ifVarAssign([1_: disjunction ], , error)

call([1_: fixed_: chain_get_negotiation, 2_: fixed_: prm3 = [{1_: parameters, 2_: negotiation, 3_: empty}], 3_: assign_: descr])
waitReturn([1_: fixed_: descr])
ifVarAssign([1_: negotiation ], , error)

// >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> Generate test chain !(A or B)
genEl([1_: assign_: node_: const_: node_A])
genEl([1_: assign_: node_: const_: node_B])

// >>>>>>>>>>> A or B
call([1_: fixed_: chain_push_first_singlet, 2_: fixed_: prm4 = [{1_: node_B, 2_: A_or_B, 3_: empty}], 3_: assign_: descr])
waitReturn([1_: fixed_: descr])

call([1_: fixed_: chain_push_singlet, 2_: fixed_: prm5 = [{1_: A_or_B, 2_: node_A, 3_: A_or_B, 4_: empty}], 3_: assign_: descr])
waitReturn([1_: fixed_: descr])

call([1_: fixed_: chain_push_singlet, 2_: fixed_: prm6 = [{1_: A_or_B, 2_: disjunction, 3_: A_or_B, 4_: empty}], 3_: assign_: descr])
waitReturn([1_: fixed_: descr])

call([1_: fixed_: chain_show, 2_: fixed_: prm7 = [{1_: A_or_B}], 3_: assign_: descr])
waitReturn([1_: fixed_: descr])
// <<<<<<<<<<< A or B

// >>>>>>>>>>> !(A or B)
call([1_: fixed_: chain_push_first_singlet, 2_: fixed_: prm8 = [{1_: A_or_B, 2_: neg_A_or_B, 3_: empty}], 3_: assign_: descr])
waitReturn([1_: fixed_: descr])

call([1_: fixed_: chain_push_singlet, 2_: fixed_: prm9 = [{1_: neg_A_or_B, 2_: negotiation, 3_: neg_A_or_B, 4_: empty}], 3_: assign_: descr])
waitReturn([1_: fixed_: descr])
// <<<<<<<<<<< !(A or B)
// <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< Generate test chain !(A or B)

// >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> Get conjunction of negotiations
varAssign([ 1_: assign_: formula, 2_: fixed_: neg_A_or_B ])

call([1_: fixed_: chain_transform_to_conjunction_of_negotiations, 2_: fixed_: prm10 = [{1_: state, 2_: true, 3_: formula, 4_: parameters, 5_: empty}], 3_: assign_: descr])
waitReturn([1_: fixed_: descr])
ifCoin([1_: fixed_: state,2_: fixed_: true], , error)

varAssign([ 1_: assign_: neg_A_and_neg_B, 2_: fixed_: formula ])
// <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< Get conjunction of negotiations

ifVarAssign([1_: neg_A_and_neg_B ], success, error)

label(error)
DBG(M4SCS(printNl([1_: fixed_: end_error_message])))
eraseEl([1_: fixed_: f_: empty])
return()
label(success)
DBG(M4SCS(printNl([1_: fixed_: end_success_message])))
eraseEl([1_: fixed_: f_: empty])
return()
end()
