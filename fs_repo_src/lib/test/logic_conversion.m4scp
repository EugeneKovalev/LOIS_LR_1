m4include(m4define([m4currentFile],builtin(translit,__file__,\,/))builtin(regexp,m4currentFile,.*[/],\&)_config.m4)
M4SCS(
#include "../../include/sckp_keynodes.scsy" 
// Location: /lib/test/logic_conversion
)
procedure(test_logic_conversion,
M4SCS(	[[
		start_message = /"=======logic_conversion start======="/, 
		end_success_message = /"=======logic_conversion end======="/,
		end_error_message = /"=======logic_conversion error======="/,
		chain_push_first = "/lib/chain/push_first/chain_push_first",
		chain_push = "/lib/chain/push/chain_push",
		chain_push_first_singlet = "/lib/chain/push_first_singlet/chain_push_first_singlet",
		chain_push_singlet = "/lib/chain/push_singlet/chain_push_singlet",
		chain_show = "/lib/chain/show/chain_show",
		chain_create_parameters = "/lib/chain/create_parameters/chain_create_parameters",
		chain_get_conjunction = "/lib/chain/get_conjunction/chain_get_conjunction",
		chain_get_disjunction = "/lib/chain/get_disjunction/chain_get_disjunction",
		chain_get_negotiation = "/lib/chain/get_negotiation/chain_get_negotiation",
		chain_transform_to_conjunction_of_negotiations = "/lib/chain/transform_to_conjunction_of_negotiations/chain_transform_to_conjunction_of_negotiations",
		chain_remove_neg_A_and_neg_B = "/lib/chain/remove_neg_A_and_neg_B/chain_remove_neg_A_and_neg_B",
		prm0,prm1, prm2, prm3, prm4, prm5, prm6, prm7, prm8, prm9, prm10, prm11, prm12, prm13, prm14, prm15, prm16, prm17
		]])
M4SEC(	[[	
		chain_push_first = /../chain/push_first[SYFIX]/chain_push_first,
		chain_push = /../chain/push[SYFIX]/chain_push,
		chain_push_first_singlet = /../chain/push_first_singlet[SYFIX]/chain_push_first_singlet,
		chain_push_singlet = /../chain/push_singlet[SYFIX]/chain_push_singlet,
		chain_show = /../chain/show[SYFIX]/chain_show,
		chain_create_parameters = /../chain/create_parameters[SYFIX]/chain_create_parameters,
		chain_get_conjunction = /../chain/get_conjunction[SYFIX]/chain_get_conjunction,
		chain_get_disjunction = /../chain/get_disjunction[SYFIX]/chain_get_disjunction,
		chain_get_negotiation = /../chain/get_negotiation[SYFIX]/chain_get_negotiation,
		chain_transform_to_conjunction_of_negotiations = /../chain/transform_to_conjunction_of_negotiations[SYFIX]/chain_transform_to_conjunction_of_negotiations,
		chain_remove_neg_A_and_neg_B = /../chain/remove_neg_A_and_neg_B[SYFIX]/chain_remove_neg_A_and_neg_B,
		prm0,prm1, prm2, prm3, prm4, prm5, prm6, prm7, prm8, prm9, prm10, prm11, prm12, prm13, prm14, prm15, prm16, prm17
		]]), 
	[{ state, true, stack, parameters, logger, descr }], 
	{[ 
		1_: out_: state,
		2_: out_: true,
		3_: in_: out_: stack, 
		4_: out_: parameters,
		5_: out_: logger
	]}) 

DBG(M4SCS(printNl([1_: fixed_: start_message])))

genEl([1_: assign_: node_: const_: state])
genEl([1_: assign_: node_: const_: true])


varAssign([ 1_: assign_: state, 2_: fixed_: true ])
DBG(M4SCS(printNl([1_: fixed_: end_success_message])))
return()
end()
