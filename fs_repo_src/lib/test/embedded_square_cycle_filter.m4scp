m4include(m4define([m4currentFile],builtin(translit,__file__,\,/))builtin(regexp,m4currentFile,.*[/],\&)_config.m4)
M4SCS([
#include "../../include/sckp_keynodes.scsy" 
// Location: /lib/test/embedded_square_cycle_filter
])
procedure(test_embedded_square_cycle_filter,
M4SCS(	[[	chain_push = "/lib/chain/push/chain_push",
		chain_push_first = "/lib/chain/push_first/chain_push_first",
		chain_destroy = "/lib/chain/destroy/chain_destroy",
		iterator_embedded_square_cycle_filter = "/lib/iterator/embedded_square_cycle_filter/iterator_embedded_square_cycle_filter",
		number_incrementor = "/lib/number/incrementor/number_incrementor";
		zero =n= 0;
		prm1,prm2,prm3,prm4,prm5,prm6]])
M4SEC(	[[
		chain_push = /../chain/push[SYFIX]/chain_push,
		chain_push_first = /../chain/push_first[SYFIX]/chain_push_first,
		chain_destroy = /../chain/destroy[SYFIX]/chain_destroy,
		iterator_embedded_square_cycle_filter = /../iterator/embedded_square_cycle_filter[SYFIX]/iterator_embedded_square_cycle_filter,
		number_incrementor = /../number/incrementor[SYFIX]/number_incrementor,
		zero = n/0/,
		prm1,prm2,prm3,prm4,prm5,prm6]]), 
	[{
		outlink, counter_link,
		counter, singleton,
		iterator_create,
		setA,
		undfA,nodeA,arcA,
		arc,descr,empty,state,
		parameters}], 
	{[]}) 

genEl([1_: assign_: node_: const_: empty])

genEl([1_: assign_: node_: const_: setA])
genElStr3([
		1_: assign_: node_: const_: nodeA,
		2_: assign_: arc_: permanent_: pos_: const_: arcA,
		3_: assign_: undf_: const_: undfA])

genElStr3([
		1_: fixed_: setA,
		2_: assign_: arc_: temporary_: actual_: pos_: const_: arc,
		3_: fixed_: nodeA])

genElStr3([
		1_: fixed_: setA,
		2_: assign_: arc_: permanent_: pos_: const_: arc,
		3_: fixed_: undfA])

genElStr3([
		1_: fixed_: setA,
		2_: assign_: arc_: permanent_: pos_: const_: arc,
		3_: fixed_: arcA])

genElStr3([
		1_: fixed_: setA,
		2_: assign_: arc_: temporary_: actual_: pos_: const_: arc,
		3_: fixed_: setA])

genEl([1_: assign_: node_: const_: counter])

contAssign([1_: fixed_: counter, 2_: fixed_: zero])

genEl([1_: assign_: node_: const_: state])

label(do)
M4SCS(
// iterator_embedded_bicycle(	setA,
//				number_incrementor(	counter))
)
genElStr3([	1_: assign_: node_: const_: singleton,
		2_: assign_: arc_: pos_: temporary_: actual_: const_: arc,
		3_: fixed_: counter])

call([1_: fixed_: chain_push_first, 2_: fixed_: prm1 = [{1_: singleton, 2_: outlink, 3_: empty}], 3_: assign_: descr])

waitReturn([1_: fixed_: descr])

call([1_: fixed_: chain_push_first, 2_: fixed_: prm2 = [{1_: outlink, 2_: counter_link, 3_: empty}], 3_: assign_: descr])

waitReturn([1_: fixed_: descr])

call([1_: fixed_: chain_push, 2_: fixed_: prm3 = [{1_: counter_link, 2_: number_incrementor, 3_: counter_link, 4_: empty}], 3_: assign_: descr])

waitReturn([1_: fixed_: descr])

call([1_: fixed_: chain_push_first, 2_: fixed_: prm4 = [{1_: counter_link, 2_: parameters, 3_: empty}], 3_: assign_: descr])

waitReturn([1_: fixed_: descr])

call([1_: fixed_: chain_push, 2_: fixed_: prm5 = [{1_: parameters, 2_: setA, 3_: parameters, 4_: empty}], 3_: assign_: descr])

waitReturn([1_: fixed_: descr])


call([1_: fixed_: iterator_embedded_square_cycle_filter, 2_: fixed_: prm6 = [{1_: state, 2_: empty, 3_: empty, 4_: parameters, 5_: logging}], 3_: assign_: descr])

waitReturn([1_: fixed_: descr])

M4SCS(
printNl([1_: fixed_: counter])
)

call([	1_: fixed_: chain_destroy,
	2_: fixed_: prd1 = [{1_: parameters, 2_: empty}],
	3_: assign_: descr])

waitReturn([1_: fixed_: descr])

call([	1_: fixed_: chain_destroy,
	2_: fixed_: prd2 = [{1_: counter_link, 2_: empty}],
	3_: assign_: descr])

waitReturn([1_: fixed_: descr])

call([	1_: fixed_: chain_destroy,
	2_: fixed_: prd3 = [{1_: outlink, 2_: empty}],
	3_: assign_: descr])

waitReturn([1_: fixed_: descr])

eraseEl([1_: fixed_: f_: singleton])

eraseEl([1_: fixed_: f_: state])
eraseEl([1_: fixed_: f_: counter])
eraseEl([1_: fixed_: f_: setA])
eraseEl([1_: fixed_: f_: arcA])
eraseEl([1_: fixed_: f_: undfA])
eraseEl([1_: fixed_: f_: nodeA])

eraseEl([1_: fixed_: f_: empty])

return()
end()