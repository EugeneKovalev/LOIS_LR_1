m4include(m4define([m4currentFile],builtin(translit,__file__,\,/))builtin(regexp,m4currentFile,.*[/],\&)_config.m4)
M4SCS([
#include "../../include/sckp_keynodes.scsy" 
// Location: /lib/test/get_different_unorient_filter
])
procedure(test_get_different_unorient_filter,
M4SCS(	[[	
		chain_push = "/lib/chain/push/chain_push",
		chain_push_first = "/lib/chain/push_first/chain_push_first",
		chain_get_next = "/lib/chain/get_next/chain_get_next",
		chain_destroy = "/lib/chain/destroy/chain_destroy",
		relation_get_different_unorient_filter = "/lib/relation/get_different_unorient_filter/relation_get_different_unorient_filter";
		prm1,prm2,prm3,prm4,prm5,prm6,prm7]])
M4SEC(	[[
		chain_push = /../chain/push[SYFIX]/chain_push,
		chain_push_first = /../chain/push_first[SYFIX]/chain_push_first,
		chain_get_next = /../chain/get_next[SYFIX]/chain_get_next,
		chain_destroy = /../chain/destroy[SYFIX]/chain_destroy,
		relation_get_different_unorient_filter = /../relation/get_different_unorient_filter[SYFIX]/relation_get_different_unorient_filter,
		prm1,prm2,prm3,prm4,prm5,prm6,prm7]]), 
	[{
		setA, setB, setC,
		undfA,undfB,nodeA,nodeB,arcA,arcB,
		arc,descr,empty,state,
		parameters,history}], 
	{[]}) 

genEl([1_: assign_: node_: const_: empty])

genEl([1_: assign_: node_: const_: setA])
genEl([1_: assign_: node_: const_: setB])
genEl([1_: assign_: node_: const_: setC])
genElStr3([
		1_: assign_: node_: const_: nodeA,
		2_: assign_: arc_: permanent_: pos_: const_: arcA,
		3_: assign_: undf_: const_: undfA])

genElStr3([
		1_: assign_: node_: const_: nodeB,
		2_: assign_: arc_: permanent_: pos_: const_: arcB,
		3_: assign_: undf_: const_: undfB])

genElStr3([
		1_: fixed_: setA,
		2_: assign_: arc_: permanent_: pos_: const_: arc,
		3_: fixed_: nodeA])

genElStr3([
		1_: fixed_: setA,
		2_: assign_: arc_: permanent_: pos_: const_: arc,
		3_: fixed_: undfA])

genElStr3([
		1_: fixed_: setA,
		2_: assign_: arc_: permanent_: pos_: const_: arc,
		3_: fixed_: arcA])

genElStr3([
		1_: fixed_: setB,
		2_: assign_: arc_: permanent_: neg_: const_: arc,
		3_: fixed_: nodeA])

genElStr3([
		1_: fixed_: setB,
		2_: assign_: arc_: permanent_: neg_: const_: arc,
		3_: fixed_: undfA])

genElStr3([
		1_: fixed_: setB,
		2_: assign_: arc_: permanent_: neg_: const_: arc,
		3_: fixed_: arcA])

genElStr3([
		1_: fixed_: setB,
		2_: assign_: arc_: permanent_: pos_: const_: arc,
		3_: fixed_: nodeB])

genElStr3([
		1_: fixed_: setB,
		2_: assign_: arc_: permanent_: pos_: const_: arc,
		3_: fixed_: undfB])

genElStr3([
		1_: fixed_: setB,
		2_: assign_: arc_: permanent_: pos_: const_: arc,
		3_: fixed_: arcB])

genElStr3([
		1_: fixed_: setA,
		2_: assign_: arc_: temporary_: pos_: actual_: const_: arc,
		3_: fixed_: nodeB])

genElStr3([
		1_: fixed_: setA,
		2_: assign_: arc_: temporary_: pos_: actual_: const_: arc,
		3_: fixed_: undfB])

genElStr3([
		1_: fixed_: setA,
		2_: assign_: arc_: temporary_: pos_: actual_: const_: arc,
		3_: fixed_: arcB])

genEl([1_: assign_: node_: const_: state])

call([1_: fixed_: chain_push_first, 2_: fixed_: prm1 = [{1_: setA, 2_: history, 3_: empty}], 3_: assign_: descr])

waitReturn([1_: fixed_: descr])

call([1_: fixed_: chain_push_first, 2_: fixed_: prm2 = [{1_: setC, 2_: parameters, 3_: empty}], 3_: assign_: descr])

waitReturn([1_: fixed_: descr])

call([1_: fixed_: relation_get_different_unorient_filter, 2_: fixed_: prm3 = [{1_: state, 2_: empty, 3_: history, 4_: parameters, 5_: empty}], 3_: assign_: descr])

waitReturn([1_: fixed_: descr])

M4SCS(
printEl([1_: fixed_: setC])
)

call([	1_: fixed_: chain_destroy,
	2_: fixed_: prm4 = [{1_: history, 2_: empty}],
	3_: assign_: descr])

waitReturn([1_: fixed_: descr])

call([	1_: fixed_: chain_destroy,
	2_: fixed_: prm5 = [{1_: parameters, 2_: empty}],
	3_: assign_: descr])

waitReturn([1_: fixed_: descr])

label(next)
call([	1_: fixed_: chain_get_next,
	2_: fixed_: prm6 = [{1_: setC, 2_: parameters, 3_: arc}],
	3_: assign_: descr])

waitReturn([1_: fixed_: descr])

ifVarAssign([1_: arc],,destroy)
call([	1_: fixed_: chain_destroy,
	2_: fixed_: prm7 = [{1_: parameters, 2_: empty}],
	3_: assign_: descr])

waitReturn([1_: fixed_: descr],next,next)

label(destroy)
eraseEl([1_: fixed_: f_: state])
eraseEl([1_: fixed_: f_: setA])
eraseEl([1_: fixed_: f_: setB])
eraseEl([1_: fixed_: f_: setC])
eraseEl([1_: fixed_: f_: arcA])
eraseEl([1_: fixed_: f_: arcB])
eraseEl([1_: fixed_: f_: undfA])
eraseEl([1_: fixed_: f_: undfB])
eraseEl([1_: fixed_: f_: nodeA])
eraseEl([1_: fixed_: f_: nodeB])

eraseEl([1_: fixed_: f_: empty])

return()
end()