m4include(m4define([m4currentFile],builtin(translit,__file__,\,/))builtin(regexp,m4currentFile,.*[/],\&)_config.m4)
M4SCS([
#include "../../include/sckp_keynodes.scsy" 
///////////////////////////////////////////////////////
//        File: reverse.m4scp
//    Location: /lib/chain/reverse
])

procedure(chain_reverse,
M4SCS(	[[
			msg1 = /"SUCCESSFUL REVERSE\n"/,
			msg2 = /"STAART REVERSE\n"/,
			chain_get_next = "/lib/chain/get_next/chain_get_next",
			chain_pop_destroy_singlet = "/lib/chain/pop_destroy_singlet/chain_pop_destroy_singlet",
			chain_destroy = "/lib/chain/destroy/chain_destroy",
			prm1, prm2]])
M4SEC(	[[	
			chain_get_next = /../chain/get_next[SYFIX]/chain_get_next,
			chain_pop_destroy_singlet = /../chain/pop_destroy[SYFIX]/chain_pop_destroy_singlet,
			chain_destroy = /../chain/destroy[SYFIX]/chain_destroy,
			prm1,prm2]]), 
	[{
		state, true, stack, parameters, logger,
		link_pointer, next_link_pointer, previous_link_pointer, singleton, singleton_value, ARC1, ARC2, descr, empty
	}], 
	{[ 
		1_: in_: out_: state,
		2_: in_: out_: true,
		3_: in_: out_: stack, 
		4_: in_: parameters,
		5_: in_: logger
	]}) 

DBG(M4SCS(print([1_: fixed_: msg2])))
genEl([1_: assign_: node_: const_: empty])
varAssign([ 1_: assign_: link_pointer, 2_: fixed_: stack ])

// # last chain processing
call([1_: fixed_: chain_get_next, 2_: fixed_: prm1 = [{1_: link_pointer, 2_: next_link_pointer, 3_: singleton}], 3_: assign_: descr])
waitReturn([1_: fixed_: descr])
eraseEl([1_: fixed_: f_: link_pointer])


label(change_direction_of_a_chain_link)
// Код где строится стрелка
ifVarAssign([1_: previous_link_pointer ], ,xxx)
searchElStr3([1_: fixed_: previous_link_pointer,
              2_: assign_: arc_: const_: ARC1,
              3_: assign_: node_: singleton],,xxx)
genElStr3([	1_: fixed_: next_link_pointer,
		2_: assign_: arc_: const_: ARC2,
		3_: fixed_: ARC1])

// #===============================================================
label(xxx)
varAssign([ 1_: assign_: link_pointer, 2_: fixed_: next_link_pointer ])
call([1_: fixed_: chain_get_next, 2_: fixed_: prm2 = [{1_: link_pointer, 2_: next_link_pointer, 3_: singleton}], 3_: assign_: descr])
waitReturn([1_: fixed_: descr])

searchElStr5([1_: fixed_: next_link_pointer,
              2_: assign_: arc_: const_: ARC1,
              3_: fixed_: singleton,
              4_: assign_: arc_: const_: ARC2,
              5_: fixed_: link_pointer],,)
eraseEl([1_: fixed_: f_: ARC2])

varAssign([ 1_: assign_: previous_link_pointer, 2_: fixed_: link_pointer ])

ifVarAssign([1_: previous_link_pointer ], change_direction_of_a_chain_link,)
// #===============================================================


label(final_step)
searchElStr3([1_: fixed_: link_pointer,
              2_: assign_: arc_: const_: ARC1,
              3_: assign_: node_: singleton],,)

genElStr3([1_: assign_: node_: stack,
              2_: assign_: arc_: const_: ARC1,
              3_: fixed_: ARC1],,)

eraseEl([1_: fixed_: f_: empty])


DBG(M4SCS(print([1_: fixed_: msg1])))
return()
end()
