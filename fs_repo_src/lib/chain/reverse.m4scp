m4include(m4define([m4currentFile],builtin(translit,__file__,\,/))builtin(regexp,m4currentFile,.*[/],\&)_config.m4)
M4SCS([
#include "../../include/sckp_keynodes.scsy" 
///////////////////////////////////////////////////////
//        File: reverse.m4scp
//    Location: /lib/chain/reverse
])

procedure(chain_reverse,
M4SCS(	[[
			entering_msg = /"<<<<<<<< entering chain_reverse\n"/,
			leaving_msg = /"<<<<<<<< leaving chain_reverse\n"/,
			error_msg = /"======== error chain_reverse\n"/,
			chain_get_next = "/lib/chain/get_next/chain_get_next",
			chain_get_next_singlet = "/lib/chain/get_next_singlet/chain_get_next_singlet",
			chain_push_first_singlet = "/lib/chain/push_first_singlet/chain_push_first_singlet",
			chain_push_singlet = "/lib/chain/push_singlet/chain_push_singlet",
			chain_get_then_routine = "/lib/chain/get_then_routine/chain_get_then_routine",
			chain_get_else_routine = "/lib/chain/get_else_routine/chain_get_else_routine",
			prm1,prm2,prm3,prm4, prm111, prm112, prm222, prm333, prm444, prm555, prm113
		]])
M4SEC(	[[	
			chain_get_next = /../chain/get_next[SYFIX]/chain_get_next,
			chain_get_next_singlet = /../chain/get_next_singlet[SYFIX]/chain_get_next_singlet,
			chain_push_first_singlet = /../chain/push_first_singlet[SYFIX]/chain_push_first_singlet,
			chain_push_singlet = /../chain/push_singlet[SYFIX]/chain_push_singlet,
			chain_get_then_routine = /../chain/get_then_routine[SYFIX]/chain_get_then_routine,
			chain_get_else_routine = /../chain/get_else_routine[SYFIX]/chain_get_else_routine,
			prm1,prm2,prm3,prm4, prm111, prm112, prm222, prm333, prm444, prm555, prm113
		]]), 
	[{
		state, true, stack, parameters, logger,
		link_pointer, next_link_pointer, previous_link_pointer, singleton, singleton_value, ARC1, ARC2, previous_linker_ARC, 
		linker_ARC, descr, empty, abstract_link_pointer, new_pointer, is_the_first_link_has_been_processed, then_routine, else_routine
	}], 
	{[ 
		1_: in_: out_: state,
		2_: in_: out_: true,
		3_: in_: out_: stack, 
		4_: in_: parameters,
		5_: in_: logger
	]}) 

DBG(M4SCS(print([1_: fixed_: entering_msg])))
genEl([1_: assign_: node_: const_: empty])

ifVarAssign([1_: stack ], , error)

// Getting a chain from stack
call([1_: fixed_: chain_get_next_singlet, 2_: fixed_: prm112 = [{1_: stack, 2_: singleton, 3_: link_pointer}], 3_: assign_: descr])
waitReturn([1_: fixed_: descr])

ifVarAssign([1_: link_pointer ], , error)

genEl([1_: assign_: node_: const_: new_pointer])
genEl([1_: assign_: node_: const_: singleton_value])
genEl([1_: assign_: node_: const_: is_the_first_link_has_been_processed])

// Check if it's a chain
call([1_: fixed_: chain_get_next_singlet, 2_: fixed_: prm113 = [{1_: link_pointer, 2_: next_link_pointer, 3_: singleton_value}], 3_: assign_: descr])
waitReturn([1_: fixed_: descr])
ifVarAssign([1_: next_link_pointer ], , error)


// <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< START LOOP
label(get_next_chain)
call([1_: fixed_: chain_get_next_singlet, 2_: fixed_: prm1 = [{1_: link_pointer, 2_: next_link_pointer, 3_: singleton_value}], 3_: assign_: descr])
waitReturn([1_: fixed_: descr])
ifVarAssign([1_: next_link_pointer ], , success) 
// =======================================> LOOP EXIT

// Create a link for the reversed chain
ifVarAssign([1_: is_the_first_link_has_been_processed ], push_first_singlet, push_next_singlet)

// Create the first link of the reversed chain
label(push_first_singlet)
call([1_: fixed_: chain_push_first_singlet, 2_: fixed_: prm3 = [{1_: singleton_value, 2_: new_pointer, 3_: empty}], 3_: assign_: descr])
waitReturn([1_: fixed_: descr])
eraseEl([1_: fixed_: f_: is_the_first_link_has_been_processed])
ifVarAssign([1_: is_the_first_link_has_been_processed ], , jump_to_the_end_of_loop)

// Create next links of the reversed chain
label(push_next_singlet)
call([1_: fixed_: chain_push_singlet, 2_: fixed_: prm4 = [{1_: new_pointer, 2_: singleton_value, 3_: new_pointer, 4_: empty}], 3_: assign_: descr])
waitReturn([1_: fixed_: descr])

label(jump_to_the_end_of_loop)
varAssign([ 1_: assign_: link_pointer, 2_: fixed_: next_link_pointer ])
ifVarAssign([1_: link_pointer ], get_next_chain, error)
// >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> FINISH LOOP

// =============================================ERROR=================================================================
label(error)
genEl([1_: assign_: node_: const_: else_routine])
call([1_: fixed_: chain_get_else_routine, 2_: fixed_: prm444 = [{1_: parameters, 2_: else_routine, 3_: empty}], 3_: assign_: descr])
waitReturn([1_: fixed_: descr])
ifVarAssign([1_: else_routine ], call_else_routine, skip_else_routine)

label(call_else_routine)
call([1_: fixed_: else_routine, 2_: fixed_: prm555 = [{1_: parameters, 2_: empty}], 3_: assign_: descr])
waitReturn([1_: fixed_: descr])
return()

label(skip_else_routine)
DBG(M4SCS(print([1_: fixed_: error_msg])))
DBG(M4SCS(print([1_: fixed_: leaving_msg])))
return()

// =============================================SUCCESS=================================================================
label(success)

genEl([1_: assign_: node_: const_: then_routine])
call([1_: fixed_: chain_get_then_routine, 2_: fixed_: prm222 = [{1_: parameters, 2_: then_routine, 3_: empty}], 3_: assign_: descr])
waitReturn([1_: fixed_: descr])
ifVarAssign([1_: then_routine ], call_then_routine, skip_then_routine)


label(call_then_routine)
call([1_: fixed_: then_routine, 2_: fixed_: prm333 = [{1_: parameters, 2_: empty}], 3_: assign_: descr])
waitReturn([1_: fixed_: descr])
return()

label(skip_then_routine)
call([1_: fixed_: chain_push_first_singlet, 2_: fixed_: prm111 = [{1_: new_pointer, 2_: stack, 3_: empty}], 3_: assign_: descr])
waitReturn([1_: fixed_: descr])
varAssign([ 1_: assign_: state, 2_: fixed_: true ])
DBG(M4SCS(print([1_: fixed_: leaving_msg])))
return()

end()
