m4include(m4define([m4currentFile],builtin(translit,__file__,\,/))builtin(regexp,m4currentFile,.*[/],\&)_config.m4)
M4SCS([
#include "../../include/sckp_keynodes.scsy" 
///////////////////////////////////////////////////////
//        File: get_disjunction.m4scp
//    Location: /lib/chain/get_disjunction
])

procedure(chain_get_disjunction,
M4SCS(	[[
			entering_msg = /">>>>>>>> entering chain_get_disjunction\n"/,
			leaving_msg = /"<<<<<<<< leaving chain_get_disjunction\n"/,
			error_msg = /"======== error chain_get_disjunction\n"/,
			chain_get_next_singlet = "/lib/chain/get_next_singlet/chain_get_next_singlet",
			prm1, prm2, prm3, prm4, prm5
		]])
M4SEC(	[[	
			chain_get_singlet_value = /../chain/get_singlet_value[SYFIX]/chain_get_singlet_value,
			prm1, prm2, prm3, prm4, prm5
		]]), 
	[{
		parameters, disjunction, logger,
		then, else, strategy,
		conjunction, disjunction,
		descr
	}], 
	{[ 
		1_: in_: out_: parameters,
		2_: in_: out_: disjunction,
		3_: in_: logger
	]}) 
DBG(M4SCS(print([1_: fixed_: entering_msg])))

call([1_: fixed_: chain_get_next_singlet, 2_: fixed_: prm1 = [{1_: parameters, 2_: parameters, 3_: then}], 3_: assign_: descr])
waitReturn([1_: fixed_: descr])
ifVarAssign([1_: then ], , error)

call([1_: fixed_: chain_get_next_singlet, 2_: fixed_: prm2 = [{1_: parameters, 2_: parameters, 3_: else}], 3_: assign_: descr])
waitReturn([1_: fixed_: descr])
ifVarAssign([1_: else ], , error)

call([1_: fixed_: chain_get_next_singlet, 2_: fixed_: prm3 = [{1_: parameters, 2_: parameters, 3_: strategy}], 3_: assign_: descr])
waitReturn([1_: fixed_: descr])
ifVarAssign([1_: strategy ], , error)

call([1_: fixed_: chain_get_next_singlet, 2_: fixed_: prm4 = [{1_: strategy, 2_: strategy, 3_: conjunction}], 3_: assign_: descr])
waitReturn([1_: fixed_: descr])
ifVarAssign([1_: conjunction ], , error)

call([1_: fixed_: chain_get_next_singlet, 2_: fixed_: prm5 = [{1_: strategy, 2_: strategy, 3_: disjunction}], 3_: assign_: descr])
waitReturn([1_: fixed_: descr])
ifVarAssign([1_: disjunction ], success, error)

label(error)
DBG(M4SCS(printNl([1_: fixed_: error_msg])))
DBG(M4SCS(print([1_: fixed_: leaving_msg])))
return()
label(success)
DBG(M4SCS(print([1_: fixed_: leaving_msg])))
return()
end()
