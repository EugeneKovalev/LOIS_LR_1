m4include(m4define([m4currentFile],builtin(translit,__file__,\,/))builtin(regexp,m4currentFile,.*[/],\&)_config.m4)
M4SCS([
#include "../../include/sckp_keynodes.scsy" 
///////////////////////////////////////////////////////
//        File: transform_to_conjunction_of_negotiations.m4scp
//    Location: /lib/chain/transform_to_conjunction_of_negotiations
])

procedure(chain_transform_to_conjunction_of_negotiations,
M4SCS(	[[
			entering_msg = /"<<<<<<<< entering chain_transform_to_conjunction_of_negotiations\n"/,
			leaving_msg = /"<<<<<<<< leaving chain_transform_to_conjunction_of_negotiations\n"/,
			error_msg = /"======== error chain_transform_to_conjunction_of_negotiations\n"/,
			looool = /"======== looool\n"/,
			chain_get_conjunction = "/lib/chain/get_conjunction/chain_get_conjunction",
			chain_get_disjunction = "/lib/chain/get_disjunction/chain_get_disjunction",
			chain_get_negotiation = "/lib/chain/get_negotiation/chain_get_negotiation",
			chain_transform_to_conjunction_of_negotiations = "/lib/chain/transform_to_conjunction_of_negotiations/chain_transform_to_conjunction_of_negotiations",
			chain_get_next_singlet = "/lib/chain/get_next_singlet/chain_get_next_singlet",

			chain_create_logical_formula = "/lib/chain/create_logical_formula/chain_create_logical_formula",

			set_insert = "/lib/set/insert/set_insert",

			chain_get_next = "/lib/chain/get_next/chain_get_next",
			chain_get_singlet_value = "/lib/chain/get_singlet_value/chain_get_singlet_value",
			chain_push_first_singlet = "/lib/chain/push_first_singlet/chain_push_first_singlet",
			chain_push_singlet = "/lib/chain/push_singlet/chain_push_singlet",

			chain_push_first = "/lib/chain/push_first/chain_push_first",
			chain_push = "/lib/chain/push/chain_push",
			chain_show = "/lib/chain/show/chain_show",
			chain_get_then_routine = "/lib/chain/get_then_routine/chain_get_then_routine",
			chain_get_else_routine = "/lib/chain/get_else_routine/chain_get_else_routine",
			prm1,prm2,prm3,prm4,prm5,prm6,prm7,prm8,prm9,prm10,prm11,prm12,prm13,prm14,prm15,prm16,prm89,prm90,prm17,prm222,prm333,prm444,prm555
		]])
M4SEC(	[[	
			chain_get_conjunction = /../chain/get_conjunction[SYFIX]/chain_get_conjunction,
			chain_get_disjunction = /../chain/get_disjunction[SYFIX]/chain_get_disjunction,
			chain_get_negotiation = /../chain/get_negotiation[SYFIX]/chain_get_negotiation,
			chain_transform_to_conjunction_of_negotiations = /../chain/transform_to_conjunction_of_negotiations[SYFIX]/chain_transform_to_conjunction_of_negotiations,
			chain_get_singlet_value = /../chain/get_singlet_value[SYFIX]/chain_get_singlet_value,
			

			chain_create_logical_formula = /../chain/create_logical_formula[SYFIX]/chain_create_logical_formula,

			set_insert = /../set/insert[SYFIX]/set_insert,

			chain_get_next = /../chain/get_next[SYFIX]/chain_get_next,
			chain_get_singlet_value = /../chain/get_singlet_value[SYFIX]/chain_get_singlet_value,
			chain_push_first_singlet = /../chain/push_first_singlet[SYFIX]/chain_push_first_singlet,
			chain_push_singlet = /../chain/push_singlet[SYFIX]/chain_push_singlet,

			chain_push_first = /../chain/push_first[SYFIX]/chain_push_first,
			chain_push = /../chain/push[SYFIX]/chain_push,
			chain_show = "/../chain/show[SYFIX]/chain_show",
			chain_get_then_routine = /../chain/get_then_routine[SYFIX]/chain_get_then_routine,
			chain_get_else_routine = /../chain/get_else_routine[SYFIX]/chain_get_else_routine,
			prm1,prm2,prm3,prm4,prm5,prm6,prm7,prm8,prm9,prm10,prm11,prm12,prm13,prm14,prm15,prm16,prm89,prm90,prm17,prm222,prm333,prm444,prm555
		]]), 
	[{
		state, true, stack, parameters, logger,
		inner_state, inner_true, inner_stack,
		conjunction, disjunction, negotiation,

		formula, singleton, transformed_element,

		conjunctors,

		singleton_value, subformula_1, subformula_2, neg_subformula_1, neg_subformula_2,
		result_formula,
		link, descr, empty,
		then_routine, else_routine
	}], 
	{[ 
		1_: in_: out_: state,
		2_: in_: out_: true,
		3_: in_: out_: stack, 
		4_: in_: parameters,
		5_: in_: logger
	]}) 

DBG(M4SCS(print([1_: fixed_: entering_msg])))

genEl([1_: assign_: node_: const_: empty])
genEl([1_: assign_: node_: const_: conjunction])
genEl([1_: assign_: node_: const_: disjunction])
genEl([1_: assign_: node_: const_: negotiation])

call([1_: fixed_: chain_get_conjunction, 2_: fixed_: prm1 = [{1_: parameters, 2_: conjunction, 3_: empty}], 3_: assign_: descr])
waitReturn([1_: fixed_: descr])
ifVarAssign([1_: conjunction ], , error)

call([1_: fixed_: chain_get_disjunction, 2_: fixed_: prm2 = [{1_: parameters, 2_: disjunction, 3_: empty}], 3_: assign_: descr])
waitReturn([1_: fixed_: descr])
ifVarAssign([1_: disjunction ], , error)

call([1_: fixed_: chain_get_negotiation, 2_: fixed_: prm3 = [{1_: parameters, 2_: negotiation, 3_: empty}], 3_: assign_: descr])
waitReturn([1_: fixed_: descr])
ifVarAssign([1_: negotiation ], , error)


DBG(M4SCS(printEl([1_: fixed_: conjunction])))

DBG(M4SCS(printEl([1_: fixed_: disjunction])))

DBG(M4SCS(printEl([1_: fixed_: negotiation])))


// Extract a formula from stack
call([1_: fixed_: chain_get_next_singlet, 2_: fixed_: prm4 = [{1_: stack, 2_: link, 3_: formula}], 3_: assign_: descr])
waitReturn([1_: fixed_: descr])
ifVarAssign([1_: formula ], , error)

// Get and check negotiation
call([1_: fixed_: chain_get_next, 2_: fixed_: prm5 = [{1_: formula, 2_: link, 3_: singleton}], 3_: assign_: descr])
waitReturn([1_: fixed_: descr])
ifVarAssign([1_: singleton ], , error)
ifCoin([1_: fixed_: negotiation, 2_: fixed_: singleton], , error)

// Get disjunction formula
call([1_: fixed_: chain_get_next, 2_: fixed_: prm6 = [{1_: link, 2_: link, 3_: singleton}], 3_: assign_: descr])
waitReturn([1_: fixed_: descr])
ifVarAssign([1_: singleton ], , error)

// Get and check disjunction
call([1_: fixed_: chain_get_next, 2_: fixed_: prm7 = [{1_: singleton, 2_: link, 3_: singleton}], 3_: assign_: descr])
waitReturn([1_: fixed_: descr])
ifVarAssign([1_: singleton ], , error)
ifCoin([1_: fixed_: disjunction, 2_: fixed_: singleton], , error)

genEl([1_: assign_: node_: const_: conjunctors])
//>>>>>>>>>>>>>>>>>>>>>>>>> Processing of disjunctive elements
label(loop_start)

call([1_: fixed_: chain_get_next, 2_: fixed_: prm8 = [{1_: link, 2_: link, 3_: singleton}], 3_: assign_: descr])
waitReturn([1_: fixed_: descr])
ifVarAssign([1_: singleton ], , loop_end)

// Pushing the element to inner stack
call([1_: fixed_: chain_push_first_singlet, 2_: fixed_: prm9 = [{1_: singleton, 2_: inner_stack, 3_: empty}], 3_: assign_: descr])
waitReturn([1_: fixed_: descr])

call([1_: fixed_: chain_transform_to_conjunction_of_negotiations, 2_: fixed_: prm10 = [{1_: state, 2_: empty, 3_: inner_stack, 4_: parameters, 5_: empty}], 3_: assign_: descr])
waitReturn([1_: fixed_: descr])

// Extract a transformed element from the inner stack
call([1_: fixed_: chain_get_next_singlet, 2_: fixed_: prm11 = [{1_: inner_stack, 2_: inner_stack, 3_: transformed_element}], 3_: assign_: descr])
waitReturn([1_: fixed_: descr])
ifVarAssign([1_: transformed_element ], , error)

// set the transformed element to set of conjunctors
call([1_: fixed_: set_insert, 2_: fixed_: prm12 = [{1_: conjunctors, 2_: transformed_element}], 3_: assign_: descr])
waitReturn([1_: fixed_: descr])
ifVarAssign([1_: conjunctors ], loop_start,)

label(loop_end)
//<<<<<<<<<<<<<<<<<<<<<<<< Processing of disjunctive elements

// make a conjunction
genEl([1_: assign_: node_: const_: result_formula])
call([1_: fixed_: chain_create_logical_formula, 2_: fixed_: prm13 = [{1_: conjunction, 2_: conjunctors, 3_: result_formula}], 3_: assign_: descr])
waitReturn([1_: fixed_: descr])

ifVarAssign([1_: result_formula ], success, error)


// =============================================ERROR=================================================================
label(error)
DBG(M4SCS(printNl([1_: fixed_: error_msg])))
genEl([1_: assign_: node_: const_: else_routine])
call([1_: fixed_: chain_get_else_routine, 2_: fixed_: prm444 = [{1_: parameters, 2_: else_routine, 3_: empty}], 3_: assign_: descr])
waitReturn([1_: fixed_: descr])
ifVarAssign([1_: else_routine ], call_else_routine, skip_else_routine)

label(call_else_routine)

call([1_: fixed_: chain_push_first, 2_: fixed_: prm14 = [{1_: formula, 2_: stack, 3_: empty}], 3_: assign_: descr])
waitReturn([1_: fixed_: descr])
call([1_: fixed_: chain_push, 2_: fixed_: prm15 = [{1_: stack, 2_: negotiation, 3_: stack, 4_: empty}], 3_: assign_: descr])
waitReturn([1_: fixed_: descr])
varAssign([ 1_: assign_: formula, 2_: fixed_: stack ])
call([1_: fixed_: chain_push_first_singlet, 2_: fixed_: prm16 = [{1_: formula, 2_: stack, 3_: empty}], 3_: assign_: descr])
waitReturn([1_: fixed_: descr])
return()

label(skip_else_routine)
DBG(M4SCS(print([1_: fixed_: error_msg])))
DBG(M4SCS(print([1_: fixed_: leaving_msg])))
return()

// =============================================SUCCESS=================================================================
label(success)

genEl([1_: assign_: node_: const_: then_routine])
call([1_: fixed_: chain_get_then_routine, 2_: fixed_: prm222 = [{1_: parameters, 2_: then_routine, 3_: empty}], 3_: assign_: descr])
waitReturn([1_: fixed_: descr])
ifVarAssign([1_: then_routine ], call_then_routine, skip_then_routine)


label(call_then_routine)
call([1_: fixed_: then_routine, 2_: fixed_: prm333 = [{1_: parameters, 2_: empty}], 3_: assign_: descr])
waitReturn([1_: fixed_: descr])
return()

label(skip_then_routine)
call([1_: fixed_: chain_push_first_singlet, 2_: fixed_: prm17 = [{1_: result_formula, 2_: stack, 3_: empty}], 3_: assign_: descr])
waitReturn([1_: fixed_: descr])
varAssign([ 1_: assign_: state, 2_: fixed_: true ])

DBG(M4SCS(print([1_: fixed_: leaving_msg])))
return()

end()
