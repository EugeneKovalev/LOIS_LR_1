m4include(m4define([m4currentFile],builtin(translit,__file__,\,/))builtin(regexp,m4currentFile,.*[/],\&)_config.m4)
M4SCS([
#include "../../include/sckp_keynodes.scsy" 
///////////////////////////////////////////////////////
//        File: transform_to_conjunction_of_negotiations.m4scp
//    Location: /lib/chain/transform_to_conjunction_of_negotiations
])

procedure(chain_transform_to_conjunction_of_negotiations,
M4SCS(	[[
			entering_msg = /"<<<<<<<< entering chain_transform_to_conjunction_of_negotiations\n"/,
			leaving_msg = /"<<<<<<<< leaving chain_transform_to_conjunction_of_negotiations\n"/,
			error_msg = /"GET FORMULA ERROR\n"/,
			chain_get_next = "/lib/chain/get_next/chain_get_next",
			chain_get_singlet_value = "/lib/chain/get_singlet_value/chain_get_singlet_value",
			chain_push_first_singlet = "/lib/chain/push_first_singlet/chain_push_first_singlet",
			chain_push_singlet = "/lib/chain/push_singlet/chain_push_singlet",
			prm1,prm2,prm3,prm4
		]])
M4SEC(	[[	
			chain_get_next = /../chain/get_next[SYFIX]/chain_get_next,
			chain_get_singlet_value = /../chain/get_singlet_value[SYFIX]/chain_get_singlet_value,
			chain_push_first_singlet = /../chain/push_first_singlet[SYFIX]/chain_push_first_singlet,
			chain_push_singlet = /../chain/push_singlet[SYFIX]/chain_push_singlet,
			prm1,prm2,prm3,prm4
		]]), 
	[{
		state, true, stack, parameters, logger,
		link, descr
	}], 
	{[ 
		1_: in_: out_: state,
		2_: in_: out_: true,
		3_: in_: out_: stack, 
		4_: in_: parameters,
		5_: in_: logger
	]}) 

DBG(M4SCS(print([1_: fixed_: entering_msg])))

call([1_: fixed_: chain_get_conjunction, 2_: fixed_: prm1 = [{1_: parameters, 2_: conjunction, 3_: empty}], 3_: assign_: descr])
waitReturn([1_: fixed_: descr])
ifVarAssign([1_: conjunction ], , error)

call([1_: fixed_: chain_get_disjunction, 2_: fixed_: prm2 = [{1_: parameters, 2_: disjunction, 3_: empty}], 3_: assign_: descr])
waitReturn([1_: fixed_: descr])
ifVarAssign([1_: disjunction ], , error)

call([1_: fixed_: chain_get_disjunction, 2_: fixed_: prm2 = [{1_: parameters, 2_: negotiation, 3_: empty}], 3_: assign_: descr])
waitReturn([1_: fixed_: descr])
ifVarAssign([1_: disjunction ], , error)

// >>>>>>>>>>> Extract 2 subformulas from the input formula
call([1_: fixed_: chain_get_next_singlet, 2_: fixed_: prm3 = [{1_: stack, 2_: link, 3_: singleton_value}], 3_: assign_: descr])
waitReturn([1_: fixed_: descr])
ifVarAssign([1_: singleton_value ], , error)
ifCoin([1_: fixed_: negotiation, 2_: fixed_: singleton_value], , error)

call([1_: fixed_: chain_get_next_singlet, 2_: fixed_: prm4 = [{1_: link, 2_: link, 3_: singleton_value}], 3_: assign_: descr])
waitReturn([1_: fixed_: descr])
ifVarAssign([1_: singleton_value ], , error)

call([1_: fixed_: chain_get_next_singlet, 2_: fixed_: prm5 = [{1_: disjunction_formula, 2_: link, 3_: disjunction}], 3_: assign_: descr])
waitReturn([1_: fixed_: descr])
ifVarAssign([1_: disjunction ], , error)

call([1_: fixed_: chain_get_next_singlet, 2_: fixed_: prm6 = [{1_: link, 2_: link, 3_: subformula_1}], 3_: assign_: descr])
waitReturn([1_: fixed_: descr])
ifVarAssign([1_: subformula_1 ], , error)

call([1_: fixed_: chain_get_next_singlet, 2_: fixed_: prm7 = [{1_: link, 2_: link, 3_: subformula_2}], 3_: assign_: descr])
waitReturn([1_: fixed_: descr])
ifVarAssign([1_: subformula_2 ], , error)
// <<<<<<<<<<< Extract 2 subformulas from the input formula

// >>>>>>>>>>> Create negative subformula_1
call([1_: fixed_: chain_push_first_singlet, 2_: fixed_: prm8 = [{1_: subformula_1, 2_: neg_subformula_1, 3_: empty}], 3_: assign_: descr])
waitReturn([1_: fixed_: descr])

call([1_: fixed_: chain_push_singlet, 2_: fixed_: prm9 = [{1_: neg_subformula_1, 2_: negotiation, 3_: neg_subformula_1, 4_: empty}], 3_: assign_: descr])
waitReturn([1_: fixed_: descr])
// <<<<<<<<<<< Create negative subformula_1

// >>>>>>>>>>> Create negative subformula_2
call([1_: fixed_: chain_push_first_singlet, 2_: fixed_: prm10 = [{1_: subformula_2, 2_: neg_subformula_2, 3_: empty}], 3_: assign_: descr])
waitReturn([1_: fixed_: descr])

call([1_: fixed_: chain_push_singlet, 2_: fixed_: prm11 = [{1_: neg_subformula_2, 2_: negotiation, 3_: neg_subformula_2, 4_: empty}], 3_: assign_: descr])
waitReturn([1_: fixed_: descr])
// <<<<<<<<<<< Create negative subformula_2

// >>>>>>>>>>> Recursive call which returns conjunction of negotiations
call([1_: fixed_: chain_transform_to_conjunction_of_negotiations, 2_: fixed_: prm11 = [{1_: state, 2_: true, 3_: neg_subformula_1, 4_: parameters, 5_: empty}], 3_: assign_: descr])
waitReturn([1_: fixed_: descr])
ifCoin([1_: fixed_: state, 2_: fixed_: true], , error)

call([1_: fixed_: chain_transform_to_conjunction_of_negotiations, 2_: fixed_: prm12 = [{1_: state, 2_: true, 3_: neg_subformula_2, 4_: parameters, 5_: empty}], 3_: assign_: descr])
waitReturn([1_: fixed_: descr])
ifCoin([1_: fixed_: state, 2_: fixed_: true], , error)
// <<<<<<<<<<< Recursive call which returns conjunction of negotiations

// >>>>>>>>>>> Create conjunction of negative subformulas
call([1_: fixed_: chain_push_first_singlet, 2_: fixed_: prm13 = [{1_: neg_subformula_2, 2_: result_formula, 3_: empty}], 3_: assign_: descr])
waitReturn([1_: fixed_: descr])

call([1_: fixed_: chain_push_singlet, 2_: fixed_: prm14 = [{1_: result_formula, 2_: neg_subformula_1, 3_: result_formula, 4_: empty}], 3_: assign_: descr])
waitReturn([1_: fixed_: descr])

call([1_: fixed_: chain_push_singlet, 2_: fixed_: prm15 = [{1_: result_formula, 2_: negotiation, 3_: result_formula, 4_: empty}], 3_: assign_: descr])
waitReturn([1_: fixed_: descr])
// <<<<<<<<<<< Create conjunction of negative subformulas

ifVarAssign([1_: result_formula ], success, error)

label(error)
DBG(M4SCS(printNl([1_: fixed_: error_msg])))
DBG(M4SCS(print([1_: fixed_: leaving_msg])))
return()

label(success)
varAssign([ 1_: assign_: stack, 2_: fixed_: result_formula ])
varAssign([ 1_: assign_: state, 2_: fixed_: true ])

DBG(M4SCS(print([1_: fixed_: leaving_msg])))
return()
end()