m4include(m4define([m4currentFile],builtin(translit,__file__,\,/))builtin(regexp,m4currentFile,.*[/],\&)_config.m4)
M4SCS([
#include "../../include/sckp_keynodes.scsy" 
///////////////////////////////////////////////////////
//        File: create_logical_formula.m4scp
//    Location: /lib/chain/create_logical_formula
])

procedure(chain_create_logical_formula,
M4SCS(	[[
			entering_msg = /">>>>>>>> entering chain_create_logical_formula\n"/,
			leaving_msg = /"<<<<<<<< leaving chain_create_logical_formula\n"/,
			error_msg = /"======== error chain_create_logical_formula\n"/,
			chain_push_first = "/lib/chain/push_first/chain_push_first",
			chain_push = "/lib/chain/push/chain_push",
			prm1, prm2, prm3, prm4
		]])
M4SEC(	[[	
			chain_push_first = /../chain/push_first[SYFIX]/chain_push_first,
			chain_push = /../chain/push[SYFIX]/chain_push,
			prm1, prm2, prm3, prm4
		]]), 
	[{
		logical_operator, elements, result_formula,
		arc, first_element, element, empty, descr
	}], 
	{[ 
		1_: in_: out_: logical_operator,
		2_: in_: out_: elements,
		3_: in_: out_: result_formula
	]}) 
DBG(M4SCS(print([1_: fixed_: entering_msg])))
genEl([1_: assign_: node_: const_: empty])

DBG(M4SCS(printEl([1_: fixed_: elements])))

searchElStr3([
	1_: fixed_: elements,
	2_: assign_: arc_: permanent_: pos_: const_: arc,
	3_: assign_: first_element
],,)
ifVarAssign([1_: first_element ], , error)
eraseEl([1_: fixed_: f_: arc])

call([1_: fixed_: chain_push_first, 2_: fixed_: prm1 = [{1_: first_element, 2_: result_formula, 3_: empty}], 3_: assign_: descr])
waitReturn([1_: fixed_: descr])





label(loop_start)
searchElStr3([
	1_: fixed_: elements,
	2_: assign_: arc_: permanent_: pos_: const_: arc,
	3_: assign_: element
], , loop_end)
eraseEl([1_: fixed_: f_: arc])

call([1_: fixed_: chain_push, 2_: fixed_: prm2 = [{1_: result_formula, 2_: element, 3_: result_formula, 4_: empty}], 3_: assign_: descr])
waitReturn([1_: fixed_: descr])
label(loop_end)










DBG(M4SCS(printNl([1_: fixed_: error_msg])))
call([1_: fixed_: chain_push, 2_: fixed_: prm3 = [{1_: result_formula, 2_: logical_operator, 3_: result_formula, 4_: empty}], 3_: assign_: descr])
waitReturn([1_: fixed_: descr])
ifVarAssign([1_: logical_operator ], success, error)

label(error)
DBG(M4SCS(printNl([1_: fixed_: error_msg])))
call([1_: fixed_: chain_push_first, 2_: fixed_: prm4 = [{1_: logical_operator, 2_: result_formula, 3_: empty}], 3_: assign_: descr])
waitReturn([1_: fixed_: descr])
DBG(M4SCS(print([1_: fixed_: leaving_msg])))
return()
label(success)
DBG(M4SCS(print([1_: fixed_: leaving_msg])))
return()
end()
