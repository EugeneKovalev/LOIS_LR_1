m4include(m4define([m4currentFile],builtin(translit,__file__,\,/))builtin(regexp,m4currentFile,.*[/],\&)_config.m4)
M4SCS([
#include "../../include/sckp_keynodes.scsy" 
///////////////////////////////////////////////////////
//        File: generate_default_parameters.m4scp
//    Location: /lib/chain/generate_default_parameters
])

procedure(chain_generate_default_parameters,
M4SCS(	[[
			entering_msg = /">>>>>>>> entering chain_generate_default_parameters\n"/,
			leaving_msg = /"<<<<<<<< leaving chain_generate_default_parameters\n"/,
			error_msg = /"======== error chain_generate_default_parameters\n"/,
			chain_generate_strategy = "/lib/chain/generate_strategy/chain_generate_strategy",
			chain_get_next = "/lib/chain/get_next/chain_get_next",
			chain_push_first = "/lib/chain/push_first/chain_push_first",
			chain_push = "/lib/chain/push/chain_push",
			prm1, prm2, prm3, prm4, prm5, prm6, prm7
		]])
M4SEC(	[[	
			chain_generate_strategy = /../chain/generate_strategy[SYFIX]/chain_generate_strategy,
			chain_get_next = /../chain/get_next[SYFIX]/chain_get_next,
			chain_push_first = /../chain/push_first[SYFIX]/chain_push_first,
			chain_push = /../chain/push[SYFIX]/chain_push,
			prm1, prm2, prm3, prm4, prm5, prm6, prm7
		]]), 
	[{
		state, true, stack, parameters, logger,
		strategy_state, strategy_true,
		link,
		comparator, strategy, else, then, default_parameters,
		descr
	}], 
	{[ 
		1_: out_: state,
		2_: out_: true,
		3_: out_: stack,
		4_: out_: parameters,
		5_: in_: out_: logger
	]}) 
DBG(M4SCS(print([1_: fixed_: entering_msg])))
genEl([1_: assign_: node_: const_: state])
genEl([1_: assign_: node_: const_: true])

// >>>>>> Generate strategy
call([1_: fixed_: chain_generate_strategy, 2_: fixed_: prm1 = [{1_: strategy_state, 2_: strategy_true, 3_: stack, 4_: parameters, 5_: logger}], 3_: assign_: descr])
waitReturn([1_: fixed_: descr])
ifCoin([1_: fixed_: strategy_state, 2_: fixed_: strategy_true], , error)

call([1_: fixed_: chain_get_next, 2_: fixed_: prm2 = [{1_: stack, 2_: link, 3_: strategy}], 3_: assign_: descr])
waitReturn([1_: fixed_: descr])
// <<<<<< Generate strategy

// >>>>>> Generate default_parameters = (then, else, strategy, comparator)
genEl([1_: assign_: node_: const_: comparator])
call([1_: fixed_: chain_push_first, 2_: fixed_: prm3 = [{1_: comparator, 2_: default_parameters, 3_: logger}], 3_: assign_: descr])
waitReturn([1_: fixed_: descr])

call([1_: fixed_: chain_push, 2_: fixed_: prm4 = [{1_: default_parameters, 2_: strategy, 3_: default_parameters, 4_: logger}], 3_: assign_: descr])
waitReturn([1_: fixed_: descr])

genEl([1_: assign_: node_: const_: else])
call([1_: fixed_: chain_push, 2_: fixed_: prm5 = [{1_: default_parameters, 2_: else, 3_: default_parameters, 4_: logger}], 3_: assign_: descr])
waitReturn([1_: fixed_: descr])

genEl([1_: assign_: node_: const_: then])
call([1_: fixed_: chain_push, 2_: fixed_: prm6 = [{1_: default_parameters, 2_: then, 3_: default_parameters, 4_: logger}], 3_: assign_: descr])
waitReturn([1_: fixed_: descr])
// <<<<<< Generate default_parameters = (then, else, strategy, comparator)

call([1_: fixed_: chain_push_first, 2_: fixed_: prm7 = [{1_: default_parameters, 2_: stack, 3_: logger}], 3_: assign_: descr])
waitReturn([1_: fixed_: descr])

varAssign([ 1_: assign_: state, 2_: fixed_: true ])

label(success)
DBG(M4SCS(print([1_: fixed_: leaving_msg])))
return()
label(error)
DBG(M4SCS(printNl([1_: fixed_: error_msg])))
return()
end()
