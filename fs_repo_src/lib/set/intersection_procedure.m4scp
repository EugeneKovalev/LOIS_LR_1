m4include(m4define([m4currentFile],builtin(translit,__file__,\,/))builtin(regexp,m4currentFile,.*[/],\&)_config.m4)
M4SCS([
#include "../../include/sckp_keynodes.scsy" 
///////////////////////////////////////////////////////
//        File: intersection_procedure.m4scp
//    Location: /lib/set/intersection_procedure
])

procedure(arc_intersection_procedure,
M4SCS(	[[
		enter_message = /"arc_intersection_procedure: entering\n"/,
		leave_message = /"arc_intersection_procedure: leaving\n"/,
		zzz1 = /"setA ASSIGNED\n"/,
		zzz2 = /"setB ASSIGNED\n"/,
		chain_get_next = "/lib/chain/get_next/chain_get_next",
		chain_get_next_singlet = "/lib/chain/get_next_singlet/chain_get_next_singlet",
		chain_push = "/lib/chain/push/chain_push",
		chain_push_first = "/lib/chain/push_first/chain_push_first",
		chain_push_first_singlet = "/lib/chain/push_first_singlet/chain_push_first_singlet",
		chain_destroy = "/lib/chain/destroy/chain_destroy",
		iterator_create_APA_output = "/lib/iterator/create_APA_output/iterator_create_APA_output",
		iterator_embedded_cycle_filter = "/lib/iterator/embedded_cycle_filter/iterator_embedded_cycle_filter",
		set_intersect_pair_filter = "/lib/set/intersect_pair_filter/set_intersect_pair_filter",
		number_incrementor = "/lib/number/incrementor/number_incrementor",
		sc_mono_assigned = "/lib/set/assigned/sc_mono_assigned",
		prm1,prm2,prm3,prm4,prm5,prm6,prm7,prm8,prm9,prm10, prm11, prm12,prm13,prm14,prm15, prm16,prm17,prm18,prm19]])
M4SEC(	[[	chain_get_next = /../chain/get_next[SYFIX]/chain_get_next,
		chain_push = /../chain/push[SYFIX]/chain_push,
		chain_push_first = /../chain/push_first[SYFIX]/chain_push_first,
		chain_get_next_singlet = /../chain/get_next_singlet[SYFIX]/chain_get_next_singlet,
		chain_destroy = /../chain/destroy[SYFIX]/chain_destroy,
		iterator_create_APA_output = /../iterator/create_APA_output[SYFIX]/iterator_create_APA_output,
		iterator_embedded_cycle_filter = /../iterator/embedded_cycle_filter[SYFIX]/iterator_embedded_cycle_filter,
		chain_push_first_singlet = /../chain/push_first_singlet[SYFIX]/chain_push_first_singlet,
		number_incrementor = /../number/incrementor[SYFIX]/number_incrementor,
		set_intersect_pair_filter = /../set/intersect_pair_filter[SYFIX]/set_intersect_pair_filter,
		sc_mono_assigned = /../set/assigned[SYFIX]/sc_mono_assigned,
		prm1,prm2,prm3,prm4,prm5,prm6,prm7,prm8,prm9, prm10, prm11, prm12, prm13,prm14,prm15, prm16,prm17,prm18,prm19]]), 
	[{
		link, empty, setC, setB, setA, setA_copy, setB_copy,
		state, true, history, parameters, logging,
		arc_history, empty, descr,
		start_element1, start_element2, end_element1, end_element2, arc
	}], 
	{[ 
		1_: in_: out_: state,
		2_: in_: out_: true,
		3_: in_: out_: history,
		4_: in_: parameters, 
		5_: in_: logging
	]}) 

DBG(M4SCS(print([1_: fixed_: enter_message])))
genEl([1_: assign_: node_: const_: empty])
//# Getting of setC
call([1_: fixed_: chain_get_next, 2_: fixed_: prm1 = [{1_: parameters, 2_: link, 3_: setC}], 3_: assign_: descr])
waitReturn([1_: fixed_: descr])
ifVarAssign([1_: link],,final)
//#======================

//# Getting of setA
call([1_: fixed_: chain_get_next, 2_: fixed_: prm2 = [{1_: history, 2_: link, 3_: setA}], 3_: assign_: descr])
waitReturn([1_: fixed_: descr])
ifVarAssign([1_: link],,final)
//#======================

//# Getting of setB
call([1_: fixed_: chain_get_next, 2_: fixed_: prm3 = [{1_: link, 2_: link, 3_: setB}], 3_: assign_: descr])
waitReturn([1_: fixed_: descr])
ifVarAssign([1_: link],,final)
//#======================

//# Check for a mono-set
searchElStr3([1_:  assign_: start_element1,
              2_: fixed_: setA,
              3_: assign_: end_element1],, processB)
//#======================

//# Making of a setA copy
call([1_: fixed_: chain_push_first_singlet, 2_: fixed_: prm4 = [{1_: setA, 2_: arc_history, 3_: empty}], 3_: assign_: descr])
waitReturn([1_: fixed_: descr])

call([1_: fixed_: sc_mono_assigned, 2_: fixed_: prm5 = [{1_: state, 2_: true, 3_: arc_history, 4_: parameters, 5_: logging}], 3_: assign_: descr])
waitReturn([1_: fixed_: descr])

call([1_: fixed_: chain_get_next, 2_: fixed_: prm6 = [{1_: arc_history, 2_: link, 3_: setA_copy}], 3_: assign_: descr])
waitReturn([1_: fixed_: descr])

call([	1_: fixed_: chain_destroy,
	2_: fixed_: prm7 = [{1_: arc_history, 2_: empty}],
	3_: assign_: descr])
waitReturn([1_: fixed_: descr])

label(processB)
//# Check for a mono-set
searchElStr3([1_:  assign_: start_element2,
              2_: fixed_: setB,
              3_: assign_: end_element2],,do_main_call)
//#======================

//# Making of a setB copy
call([1_: fixed_: chain_push_first_singlet, 2_: fixed_: prm8 = [{1_: setB, 2_: arc_history, 3_: empty}], 3_: assign_: descr])
waitReturn([1_: fixed_: descr])

call([1_: fixed_: sc_mono_assigned, 2_: fixed_: prm9 = [{1_: state, 2_: true, 3_: arc_history, 4_: parameters, 5_: logging}], 3_: assign_: descr])
waitReturn([1_: fixed_: descr])

call([1_: fixed_: chain_get_next, 2_: fixed_: prm10 = [{1_: arc_history, 2_: link, 3_: setB_copy}], 3_: assign_: descr])
waitReturn([1_: fixed_: descr])

call([	1_: fixed_: chain_destroy,
	2_: fixed_: prm11 = [{1_: arc_history, 2_: empty}],
	3_: assign_: descr])
waitReturn([1_: fixed_: descr])

label(do_main_call)
//# Assign setA
ifVarAssign([1_: setA_copy],,assign_setA)
call([1_: fixed_: chain_push_first, 2_: fixed_: prm12 = [{1_: setA_copy, 2_: arc_history, 3_: empty}], 3_: assign_: descr])
waitReturn([1_: fixed_: descr], end_of_setA_assigning)
label(assign_setA)
call([1_: fixed_: chain_push_first, 2_: fixed_: prm13 = [{1_: setA, 2_: arc_history, 3_: empty}], 3_: assign_: descr])
waitReturn([1_: fixed_: descr])
label(end_of_setA_assigning)

//# Assign setB
ifVarAssign([1_: setB_copy],,assign_setB)
call([1_: fixed_: chain_push, 2_: fixed_: prm14 = [{1_: arc_history, 2_: setB_copy, 3_: arc_history, 4_: empty}], 3_: assign_: descr])
waitReturn([1_: fixed_: descr], end_of_setB_assigning)
label(assign_setB)
call([1_: fixed_: chain_push, 2_: fixed_: prm15 = [{1_: arc_history, 2_: setB, 3_: arc_history, 4_: empty}], 3_: assign_: descr])
waitReturn([1_: fixed_: descr])
label(end_of_setB_assigning)

//# call main function
call([1_: fixed_: set_intersect_pair_filter, 2_: fixed_: prm16 = [{1_: state, 2_: true, 3_: arc_history, 4_: parameters, 5_: logging}], 3_: assign_: descr])

waitReturn([1_: fixed_: descr])

call([	1_: fixed_: chain_destroy,
	2_: fixed_: prm17 = [{1_: arc_history, 2_: empty}],
	3_: assign_: descr])
waitReturn([1_: fixed_: descr])

label(final)
DBG(M4SCS(print([1_: fixed_: leave_message])))

return()
end()