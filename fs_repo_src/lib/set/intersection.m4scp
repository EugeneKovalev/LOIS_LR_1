m4include(m4define([m4currentFile],builtin(translit,__file__,\,/))builtin(regexp,m4currentFile,.*[/],\&)_config.m4)
M4SCS([
#include "../../include/sckp_keynodes.scsy" 
///////////////////////////////////////////////////////
//        File: intersection.m4scp
//    Location: /lib/set/intersection
])

procedure(set_intersection,
M4SCS(	[[
		start_message = /"intersection: enteringzz"/, 
		end_message = /"intersection: leaving"/,	
		chain_push = "/lib/chain/push/chain_push",
		chain_push_first = "/lib/chain/push_first/chain_push_first",
		chain_destroy = "/lib/chain/destroy/chain_destroy",
		set_intersect_pair_filter = "/lib/set/intersect_pair_filter/set_intersect_pair_filter",
		arc_intersection_procedure = "/lib/set/intersection_procedure/arc_intersection_procedure",
		prm1,prm2]])
M4SEC(	[[	chain_push = /../chain/push[SYFIX]/chain_push,
		chain_push_first = /../chain/push_first[SYFIX]/chain_push_first,
		chain_destroy = /../chain/destroy[SYFIX]/chain_destroy,
		arc_intersection_procedure = /../set/intersection_procedure[SYFIX]/arc_intersection_procedure,
		set_intersect_pair_filter = /../set/intersect_pair_filter[SYFIX]/set_intersect_pair_filter,
		prm1,prm2]]), 
	[{
		state, true, history, parameters, logging,
		descr}], 
	{[ 
		1_: in_: out_: state,
		2_: in_: out_: true,
		3_: in_: out_: history,
		4_: in_: parameters, 
		5_: in_: logging
	]}) 

call([1_: fixed_: set_intersect_pair_filter, 2_: fixed_: prm1 = [{1_: state, 2_: true, 3_: history, 4_: parameters, 5_: logging}], 3_: assign_: descr])

waitReturn([1_: fixed_: descr])

DBG(M4SCS(printNl([1_: fixed_: start_message])))

call([1_: fixed_: arc_intersection_procedure, 2_: fixed_: prm2 = [{1_: state, 2_: true, 3_: history, 4_: parameters, 5_: logging}], 3_: assign_: descr])

waitReturn([1_: fixed_: descr])

DBG(M4SCS(printNl([1_: fixed_: end_message])))

return()
end()